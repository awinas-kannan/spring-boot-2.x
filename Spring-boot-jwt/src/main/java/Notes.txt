JWT : Json Web Token 

https://www.javainuse.com/spring/jwt

JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting 
information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. 
The client will need to authenticate with the server using the credentials only once. During this time the server validates 
the credentials and returns the client a JSON Web Token(JWT). For all future requests the client can authenticate itself to 
the server using this JSON Web Token(JWT) and so does not need to send the credentials like username and password.


During the first request the client sends a POST request with username and password. Upon successful authentication 
the server generates the JWT sends this JWT to the client. This JWT can contain a payload of data. On all subsequent requests 
the client sends this JWT token in the header. Using this token the server authenticates the user. So we don't need the client to send 
the user name and password to the server during each request for authentication, but only once after which the server issues a JWT to 
the client. A JWT payload can contain things like user ID so that when the client again sends the JWT, you can be sure that 
it is issued by you, and you can see to whom it was issued.


*********************************************************************************************************************************

Spring boot  + JWT
https://www.javainuse.com/spring/boot-jwt

Spring Security and JWT Configuration

Generating JWT - Expose a POST API with mapping /authenticate. On passing correct username and password(Secrets) it will generate a JSON Web Token(JWT)
Validating JWT - If user tries to access GET API with mapping /employee/{id}. It will allow access only if request has a valid JSON Web Token(JWT)


<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
</dependency>
<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt</artifactId>
			<version>0.9.1</version>
</dependency>
		
		
1 ) Create JWT Util:
2 ) JwtUserDetailsService -> Load user by user name
3 ) JwtAuthenticationController		
	    1) JwtRequestDto
	    2) JwtResponseDto
4) JwtRequestFilter	 
5) JwtAuthenticationEntryPoint   
	    
	    
	    
	    	
		