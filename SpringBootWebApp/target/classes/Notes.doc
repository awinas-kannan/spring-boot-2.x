Spring Boot web App:


****** Springboot + WEB (EmployeeController.java)
Dependency : web

@RestController = @Controller + @ResponseBody ( The purpose of response body is that, we are telling dispatcher 
servlet that we are returning data (Employee ,List<Employee) and not the view (.jsp)
Without @ResponseBody , the jsp will be downloaded in page.

<!-- Used for parsing the jsp page --> 
<dependency>
			<groupId>org.apache.tomcat</groupId>
			<artifactId>tomcat-jasper</artifactId>
			<version>9.0.27</version>
</dependency>

application.properties:
**jsp page location:
spring.mvc.view.prefix=/Pages/
**View page extention
spring.mvc.view.suffix=.jsp

@RequestParam -> Directly map ( req.getParameter("") ) to variable
Ex : (@RequestParam("name") String myName // http://localhost:8080/getEmp2?name=awi


***** Springboot + WEB + JPA + H2 ( Inmemory database) // (EmployeeH2Controller.java)
spring.h2.console.enabled=true
spring.datasource.platform=h2
spring.datasource.url=jdbc:h2:mem:awi

http://localhost:9090/h2-console

**Protocol in crudRepo

findBy***
getBy***


JpaRepository extends CRUDRepository
repo.findAll() in CRUDRepository return Iterable<Employee>
repo.findAll() in JpaRepository return List<Employee>

Jackson jar is reponsible for converting java object to json
Jackson data format xml   is reponsible for converting java object to XML
Content negotiation : requesting JSON / XML
server producing different content types
Client consumes different content types

if produces and consumes vary ( 406 not acceptable error)


****H2 , JPA ,Rest reposotories
SpringDataRest:(SpringDataRestJPARepo.java)
@RepositoryRestResource(collectionResourceRel = "employees", path = "employees")


**check final segment of video
We dont even need controller.
We can specify the URL in JPSRepositoty class itself
It will work based in Request Type (get ,post ,delete , put)

****************
Check mapping





**********************************************
Tutorial point :

######https://www.tutorialspoint.com/spring_boot/spring_boot_introduction.htm
SpringBoot is used to create Micro Service:
Micro Service is an architecture that allows the developers to develop and deploy services independently. 
Each service running has its own process and this achieves the lightweight model 
to support business applications.

Advantages
Spring Boot offers the following advantages to its developers −

Easy to understand and develop spring applications
Increases productivity
Reduces the development time

Goals:
Spring Boot is designed with the following goals −

To avoid complex XML configuration in Spring
To develop a production ready Spring applications in an easier way
To reduce the development time and run the application independently
Offer an easier way of getting started with the application

***In Spring Boot, everything is auto configured; no manual configurations are needed.
***It offers annotation-based spring application
***Eases dependency management
***It includes Embedded Servlet Container

How does it work?
It automatically configured based on the dependency that you have added in POM
using the @EnableAutoConfiguration
For example, if MySQL database is on your classpath, 
but you have not configured any database connection, 
then Spring Boot auto-configures an in-memory database.

Entry Point ::@SpringBootApplication annotation and the main method
@ComponentScan :: Scans all the components in project

spring-boot-starter-****

spring-boot-starter-actuator dependency is used to monitor and manage your application.
spring-boot-starter-security dependency is used for Spring Security
spring-boot-starter-web dependency is used to write a Rest Endpoints.
spring-boot-starter-thymeleaf dependency is used to create a web application
spring-boot-starter-data-jpa -->  Spring and JPA for database access

#######https://www.tutorialspoint.com/spring_boot/spring_boot_quick_start.htm
Prerequisites
Your system need to have the following minimum requirements to create a Spring Boot application −
Java 7
Maven 3.2

spring boot CLI -- For Groovy

groupId – a unique base name of the company or group that created the project.
artifactId – a unique name of the project.

#######Spring Boot Servlet Initializer
https://www.tutorialspoint.com/spring_boot/spring_boot_tomcat_deployment.htm
We need to extend the class SpringBootServletInitializer to support WAR file deployment.
Binds Servlet, Filter and ServletContextInitializer beans from the application context to the server. 

#######Dependency Management
Spring Boot team provides a list of dependencies to support the Spring Boot version for its every release. 
You do not need to provide a version for dependencies in the build configuration file. 
Spring Boot automatically configures the dependencies version based on the release


########Dependency injection
@ComponentScan annotation is used to find beans and the corresponding injected with @Autowired annotation.

Autowiring a rest template object:::
@Bean
public RestTemplate getRestTemplate() {
   return new RestTemplate();
}

#########Application Runner/Command Line Runner
Application Runner is an interface used to execute the code after the Spring Boot application started

Command Line Runner is an interface. It is used to execute the code after the Spring Boot application started. 


##https://www.tutorialspoint.com/spring_boot/spring_boot_application_properties.htm
@Value("${spring.application.name}")
 private String name;
 

If the property is not found while running the application, Spring Boot throws the Illegal Argument exception 

To avoid the issue , we can set default value 
@Value("${property_key_name:default_value}")
@Value("${spring.application.name:demoservice}")
 
#########Logging
logback.xml for logging / info ,error ,debug , warn 


#########Exception handling
https://www.tutorialspoint.com/spring_boot/spring_boot_exception_handling.htm

@ControllerAdvice -- > For exception Handling
@ExceptionHandler(value = ProductNotfoundException.class)
https://howtodoinjava.com/spring-core/spring-exceptionhandler-annotation/



#########Intercetor ----  InterceptorRegistry
You can use the Interceptor in Spring Boot to perform operations under the following situations −
Before sending the request to the controller
Before sending the response to the client

Methods :::
prehandle
posthandle
aftercompletion

Creation : We need @component & HandlerInterceptor
@Component
public class ProductServiceInterceptor implements HandlerInterceptor 

You will have to register this Interceptor with InterceptorRegistry by using WebMvcConfigurerAdapter

@Component
public class ProductServiceInterceptorAppConfig extends WebMvcConfigurerAdapter {
   @Autowired
   ProductServiceInterceptor productServiceInterceptor;

   @Override
   public void addInterceptors(InterceptorRegistry registry) {
      registry.addInterceptor(productServiceInterceptor);
   }
}

We have to add interceptor in Interceptor Registry

##Filter
A filter is an object used to intercept the HTTP requests and responses of your application. 
By using filter, we can perform two operations at two instances −
Before sending the request to the controller
Before sending a response to the client.

@Component
public class SimpleFilter implements Filter 

Methods::init , destroy, doFilter

##Service
Service Components are the class file which contains @Service annotation. 
These class files are used to write business logic in a different layer, 
separated from @RestController class file.


##Spring Boot - Internationalization
Language Adaptability
adaptable to different languages and regions without engineering changes on the source code. In other words, 
Internationalization is a readiness of Localization

messages_XX.properties.
Eg:messages_fr.properties
welcome.text=Salut Bienvenue à tous
http://localhost:8080/locale?language=fr



#######Swagger::
https://www.tutorialspoint.com/spring_boot/spring_boot_enabling_swagger2.htm
@EnableSwagger2
DOCKET
